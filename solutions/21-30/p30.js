//1.PROBLEM

//There are only three numbers that can be written
//as the sum of fourth powers of their digits

// 1634 = 1^4 + 6^4 + 3^4 + 4^4
// 8208 = 8^4 + 2^4 + 0^4 + 8^4
// 9474 = 9^4 + 4^4 + 7^4 + 4^4

//Find the sum of all numbers that can be written
//as the sum of the fifth powers of their digits

// 2.OUTLINE TO SOLUTION

//Brute Force

//1. For any number upto K, check if it can be 
//	generated by sum of its fifth powers of its digits
//2. Add number to the overall sum

//What is K?
//We need an upper bound k
//k of the form "xyz.." = x^5 + y^5 +z^5...
//largest number for x^5 = 9^5 => 59,045
//9^5+9^5+9^5 = 177,147 which has more than 3 digits
//9^5+9^5+9^5+9^5 = 236,196 which has more than 4 digits
//9^5+9^5+9^5+9^5+9^5 = 295,245 which has more than 5 digits
//6*(9^5) = 354,294 which has 6 digits => k = 354,294
//7*(9^5) = 413,343 which has 6 digits


//SOLUTION
//Start Counting time down
var start = new Date().getTime();

function solveP30(k){

	var sum = 0;

	//check for numbers until k
	for (var i=2; i < k; i++){
		if (sumOfFifths(i)){
			//add the numbers the sumOfFifths
			sum +=i;
		}
	}

	//output solution
	console.log("Sum of numbers which are sum of fifth power of digits:%s", sum);
	return sum;
}

//return true if the number is the sum of the fifth powers of digits
function sumOfFifths(n){
	// console.log("checking if n:%s satisfies condition", n);

	//Convert number into a string so we can 
	//parse out the digits
	var sum = 0;
	var str = n.toString();


	for (var i =0; i<str.length; i++){
		sum += Math.pow(str[i],5);
	}

	if (sum == +n){
		return true;
	} 
	return false;

}

solveP30(354294);
//End time
var end = new Date().getTime();
console.log("Time to calculate: %s milliseconds", end-start); //224 milliseconds