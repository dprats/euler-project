{
  "name": "big",
  "version": "0.4.2",
  "scripts": {
    "start": "node ./bin/big"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/bigcompany/big.git"
  },
  "dependencies": {
    "resource": "0.4.2",
    "resources": "0.4.2"
  },
  "engines": {
    "npm": "~1.2.10"
  },
  "bin": {
    "big": "./bin/big"
  },
  "license": "MIT",
  "readme": "# Big\n\nBig is a next generation application \"framework\" which solves the domain problem of building applications for the web.\n\n - No more writing interface code\n - No more writing API boilerplate\n - No more fishing on `npm` for decent quality modules\n - No more glue\n\nBig allows you to focus on **business logic**.\n\n## Big itself is zero lines long. \n\nWhat? How can a framework be zero lines long?\n\nBig actually doesn't do anything. It's more of a [philosopy](http://big.vc/mission) then a framework.\n\nBig provides a collection of curated [resources](http://github.com/bigcompany/resources) defined by the [resource](http://github.com/bigcompany/resource) library. Developers can use any of these resources independently of any \"framework\".\n\n\n\n## A curated API across npm modules\n\nBig ships with support for [over 50 of the most popular NPM modules](https://github.com/bigcompany/resources). We have hand picked ( and tested ) each of these modules and created a unified API to allow for rapid application development.\n\n### A unified approach \n\n\n - Unified configuration of npm modules\n - Unified API across npm modules ( `start` / `stop` / `connect` / `disconnect` / etc.. )\n - Unified method signatures\n\nAll of the following methods will work. Any missing arguments data is intelligently filled in with defaults.\n\n``` js\n    var message = \"hello there\";\n\n    twitter.send(message, cb);\n    sms.send(message, cb);\n    email.send(message, cb);\n    irc.send(message, cb);\n    mesh.send(message, cb);\n```\n\n## Developer Friendly\n\nConfused? Lost? Try a `console.log`!\n\nBig is designed to be highly introspectable. Resources are simple structures that can be easily logged to the console. It's trivial to start iterating through a resource's schema and metaprogramming a new interface.\n\n\n## Reflection across multiple interfaces\n\nBig has support to reflect resources across:\n\n - REST\n - Socket\n - Forms\n - CLI\n - Documentation\n - IRC\n - Mesh\n\n[and many more...](http://github.com/bigcompany/resources/)\n\nCustomization of the reflection logic is always possible and simple. If a use-case not covered by the reflected interface is required, a simple lower-level API is always available.\n\n## Example Apps\n\n[https://github.com/bigcompany/big/tree/master/examples](https://github.com/bigcompany/big/tree/master/examples)\n\n\n## Resource Development\n\n[https://github.com/bigcompany/resource](https://github.com/bigcompany/resource)\n\n## Featured Resources\n\n[https://github.com/bigcompany/resources](https://github.com/bigcompany/resources)",
  "readmeFilename": "README.md",
  "description": "Big is a next generation application \"framework\" which solves the domain problem of building applications for the web.",
  "bugs": {
    "url": "https://github.com/bigcompany/big/issues"
  },
  "homepage": "https://github.com/bigcompany/big",
  "_id": "big@0.4.2",
  "_from": "big@"
}
